.Title {
  width: 100vw;
  height: 100vh;
  overflow: hidden;

  display: grid;
  grid-template-columns: [sigrid-area] 10vw [center-area] 1fr [ulf-area] 10vw;
  grid-template-rows: 1fr 1fr;

  > * {
    display: flex;
    position: relative;
  }

  #logo {
    background-color: red;
    grid-column: center-area / span 1;
    grid-row: 1 / span 1;

    z-index: 1;
    justify-content: center;

    img {
      width: 50vw;
      max-width: 700px;
      min-width: 404px;
    }
  }

  #selection {
    grid-column: center-area / span 1;
    grid-row: 2 / span 1;

    z-index: 4;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
  }

  $min-width: 690px;
  $max-width: 870px;
  $width: 60vw;
  $max-height: 100%;
  $vert-offset: 160px;

  #sigrid {
    background-color: green;
    grid-column: sigrid-area / span 1;
    grid-row: 1 / span 2;

    img {
      min-width: $min-width;
      width: $width;
      max-width: $max-width;
      transform: translate(-100px, $vert-offset );

      z-index: 3;
      position: absolute;
      bottom: 0;
      left: 0;
    }
  }

  #ulf {
    background-color: yellow;
    grid-column: ulf-area / span 1;
    grid-row: 1 / span 2;

    img {
      min-width: $min-width;
      width: $width;
      max-width: $max-width;
      transform: translate(160px, $vert-offset);

      z-index: 2;
      position: absolute;
      bottom: 0;
      right: 0;

    };
  }
}

// FIXME: Sigrid moves earlier than Ulf, but I believe
// this is due to image height. If they were the same dimensions,
// I'm sure this would be fixed. An alternative is to use 
// something like this where the width and height is calculated
// based on what the other one is doing.

// @function get-vert-slide($tar) {
//   $vw-context: (1000*.01) * 1px;
//   @return ($tar/$vw-context) * 1vw;
// }
